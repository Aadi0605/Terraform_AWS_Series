
--> The type argument in a variable block allows you to restrict the type of value that will be accepted
	as the value for a variable. If no type constraint is set then a value of any type is accepted.
	
--> Type constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:
	
	The Terraform language uses the following types for its values:

	--> string: a sequence of Unicode characters representing some text, like "hello".
				number: a numeric value. The number type can represent both whole numbers like 15 and fractional values like 6.283185.

	--> bool: a boolean value, either true or false. bool values can be used in conditional logic.

	--> list (or tuple): a sequence of values, like ["us-west-1a", "us-west-1c"]. Elements in a list or tuple are identified by
						consecutive whole numbers, starting with zero.

	--> map (or object): a group of values identified by named labels, like 
		example
		{
			name = "Mabel"
			age = 52
		}
	
--> Strings, numbers, and bools are sometimes called primitive types. Lists/tuples and maps/objects are sometimes called complex types, 
	structural types, or collection types.

--> Finally, there is one special value that has no type:
		
	-->null :  a value that represents absence or omission. If you set an argument of a resource or module to null