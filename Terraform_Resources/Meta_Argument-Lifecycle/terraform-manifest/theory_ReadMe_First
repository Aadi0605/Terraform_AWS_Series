Theory : Meta_Argument : Lifecycle

--> Lifecycle is a nested block that can appear within a resource block .

--> The Lifecycle block and its content are meta arguments , available for all resource blocks regardless of type . 
	
	Type of Lifecycle
	|
	|_ 1)create_before_destroy
	|
	|_ 2)prevent_destroy -  It is used generally when we are creating some important resource like db , prod loadbalancer etc 
							and when we dont want it to be deleted .so we can use it inside a resource block .   
	|
	|_ 3)ignore_changes
	
-->	lifecyle - create_before_destroy
		~ Default Behavior of a Resource: Destroy Resource & re-create Resource
		~ With Lifecycle Block we can change that using create_before_destroy=true
			~ First new resource will get created
			~ Second old resource will get destroyed
	Add Lifecycle Block inside Resource Block to alter behavior
	
	lifecycle {
		create_before_destroy = true
	}	
	
--> lifecyle -prevent_destroy
	Introduction
		~ This meta-argument, when set to true, will cause Terraform to reject with an error any plan that would destroy the 
		  infrastructure object associated with the resource, as long as the argument remains present in the configuration.
		~ This can be used as a measure of safety against the accidental replacement of objects that may be costly to reproduce,
		  such as database instances
		~ However, it will make certain configuration changes impossible to apply, and will prevent the use of the terraform 
		  destroy command once such objects are created, and so this option should be used sparingly.
		~ Since this argument must be present in configuration for the protection to apply, note that this setting does not prevent
    		the remote object from being destroyed if the resource block were removed from configuration entirely: in that case, the 
			prevent_destroy setting is removed along with it, and so Terraform will allow the destroy operation to succeed.
  
		lifecycle {
			prevent_destroy = true # Default is false
		}		
		
	Execute Terraform Commands
	# Switch to Working Directory
	cd v2-prevent_destroy

	# Initialize Terraform
	terraform init

	# Validate Terraform Configuration Files
	terraform validate

	# Format Terraform Configuration Files
	terraform fmt

	# Generate Terraform Plan
	terraform plan

	# Create Resources
	terraform apply -auto-approve

	# Destroy Resource
	terraform destroy 	
	
	Observation: 
	Terraform_AWS_series:v2-prevent_destroy kdaida$ terraform destroy -auto-approve
	Error: Instance cannot be destroyed
    on c2-ec2-instance.tf line 2:
    2: resource "aws_instance" "web" {
	Resource aws_instance.web has lifecycle.prevent_destroy set, but the plan
	calls for this resource to be destroyed. To avoid this error and continue with
	the plan, either disable lifecycle.prevent_destroy or reduce the scope of the
	plan using the -target flag.


	# Remove/Comment Lifecycle block
	- Remove or Comment lifecycle block and clean-up

	# Destroy Resource after removing lifecycle block
	terraform destroy

	# Clean-Up
	rm -rf .terraform*
	rm -rf terraform.tfstate*
	


	